<?php

namespace app\models;

use app\modules\api\v1\models\Users;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "vpn_ips".
 *
 * @property int $id
 * @property string $ip
 * @property string $status
 * @property string|null $country
 * @property string|null $city
 * @property string|null $cert
 * @property string|null $host
 * @property string|null $login
 * @property string|null $password
 * @property string|null $expire
 * @property string|null $provider
 * @property string|null $type
 * @property string|null $last_ping_time
 * @property int|null $openvpn
 * @property int|null $ikev2
 * @property int|null $connection
 */
class VpnIps extends \yii\db\ActiveRecord
{
    public $file;
    public $file_core;
    public $certType;
    const CERT_IKEV = 'ikev2';
    const CERT_OPVPN = 'openvpn';
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'vpn_ips';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['ip', 'status'], 'required'],
            [['expire','last_ping_time'], 'safe'],
            [['load_serv','connection'], 'integer', 'max' => 100, 'min' => 0],
            [['ikev2', 'openvpn'], 'integer'],
            [['ip', 'cert', 'host', 'provider', 'login', 'password'], 'string', 'max' => 255],
            [['file','certType','file_core'], 'safe'],
            [['file'], 'file'],
            [['file'], 'file', 'maxSize' => '20000000'],
            [['status', 'country', 'type', 'city'], 'string', 'max' => 50],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'ip' => 'ip',
            'status' => 'Статус',
            'country' => 'Страна',
            'city' => 'Город',
            'cert' => 'Сертификат',
            'host' => 'Хост',
            'provider' => 'Провайдер',
            'login' => 'Логин',
            'type' => 'Тип',
            'password' => 'Пароль',
            'expire' => 'Действует до',
            'file' => 'Файл сертификата',
            'load_serv' => 'Нагрузка %',
            'la' => 'Нагрузка %',
            'desc' => 'Описание',
            'certType' => 'Тип сертификата',
            'file_core' => 'Корневой сертификат',
            'connection' => 'Доступность',
            'last_ping_time' => 'Доступность',
        ];
    }

    public function beforeSave($insert)
    {
//        $this->file = UploadedFile::getInstance($this, 'file_core');
//        if (!empty($this->file)) {
//            $fileName = $this->ip . '.' . $this->file->extension;
//            if (!is_dir(Yii::getAlias('@app') . '/web/certs/')) {
//                mkdir(Yii::getAlias('@app') . '/web/certs/');
//            }
//            $this->file->saveAs(Yii::getAlias('@app') . '/web/certs/' . $fileName);
//            $this->cert = $fileName;
//        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if(isset($_FILES['data'])){
            $data = $_POST['data'];
            $this->file = UploadedFile::getInstancesByName('data');
            foreach ($this->file as $k => $file) {
                if (!empty($file)) {
                    $fileName = $this->ip .'.'.$data[$k]['certType']. '.' . $file->extension;
                    if (!is_dir(Yii::getAlias('@app') . '/web/certs/')) {
                        mkdir(Yii::getAlias('@app') . '/web/certs/');
                    }
                    $file->saveAs(Yii::getAlias('@app') . '/web/certs/' . $fileName);
                    $cers = new VpnCerts();
                    $cers->ip_id = $this->id;
                    $cers->file = $fileName;
                    $cers->cert_type = $data[$k]['certType'];
                    $cers->save();
                }
            }
            $this->file = '';
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getVpnServerList()
    {
        $data = null;
        /*#todo везде использовать эту функцию вместо user->identity->getSettings*/
        $domain =(self::getSettings()['domain'] ?? 'vpn-max.com');
        $request = json_decode(Yii::$app->request->getRawBody(), true);
        $user = new Users();
        if ($user->load($request, "") && $user->login() && Yii::$app->user->identity->getStatus() == VpnUserSettings::$statuses['ACTIVE']) {
            if(isset($request['vpnLogin']) && VpnUserSettings::find()->where(['username' => $request['vpnLogin']])->one() && !$user->tariff && $user->tariff != 'Free') {
                $vpnIps = VpnIps::find()->orderBy('type desc')->joinWith('certs')->all();
            } else {
                $vpnIps = VpnIps::find()->orderBy('id desc')->joinWith('certs')->all();
            }
        } else {
            $vpnIps = VpnIps::find()->where(['type' => VpnUserSettings::$types['Free']])->joinWith('certs')->orderBy('id desc')->all();
        }
        /*country*/
        $countryPng = '';
        if($vpnIps->country){
            $country = Country::find()->where(['title' => $vpnIps->country])->one();
            if(!empty($country)) {
                $countryPng = 'https://www.'.$domain.'/web/'.$country->code.'.png';
            }
        }
        $core_cert = Settings::find()->where(['name' => 'core_cert'])->one();
        $data['core_cert'] = $core_cert->value ? 'https://www.'.$domain.'/web/certs/' .$core_cert->value: '';
        if (!empty($vpnIps)) {
            foreach ($vpnIps as $server) {
                if ($server->status == \app\models\VpnUserSettings::$statuses['NOACTIVE']) continue;
                $certs = [];
                if(!empty($server['certs'])){
                    foreach($server['certs'] as $cert) {
                        $certs[] = [
                            'type' => $cert->cert_type,
                            'link' => 'https://www.'.$domain.'/web/certs/' . $cert->file
                        ];
                    }
                }
                $data['list'][] = [
                    'id' => $server->id,
                    'ip' => $server->ip,
                    'host' => $server->host,
                    'country' => $server->country,
                    'countryPng' => $countryPng,
                    'city' => $server->city,
//                    'core_cert' => 'https://www.vpn-max.com/web/certs/' .$server->cert,
                    'cert' => $certs,
                    'load' => $server->load_serv->la ?? null,
                    'type' => $server->type,
                ];
            }
        }
        return $data;
    }

    public static function getSettings()
    {
        $settings = Settings::find()->asArray()->all();
        if (empty($settings)) {
            return [];
        }
        $settingMap = [];
        foreach ($settings as $setting) {
            $settingMap[$setting['name']] = $setting['value'];
        }
        return $settingMap;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getServerLoad()
    {
        return $this->hasOne(Serverload::className(), ['ipaddr' => 'ip']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCerts()
    {
        return $this->hasMany(VpnCerts::className(), ['ip_id' => 'id']);
    }

    /**
     * @return void
     */
    public static function updateActiveConnection()
    {
        echo "\n start";
        $servers = VpnIps::find()->all();
        $connections = Activeconn::find()->all();
        foreach ($servers as $server) {
            $server->openvpn = 0;
            $server->ikev2 = 0;
            foreach ($connections as $connection) {
                if ($connection->serv_ip == $server->ip && $connection->ipsec_conn) {
                    $server->ikev2++;
                }
                if ($connection->serv_ip == $server->ip && $connection->opvn_conn) {
                    $server->openvpn++;
                }
            }
            $server->save();
        }
        echo "\n end";
    }
    /**
     * @return void
     */
    public static function pingServers()
    {
        $servers = VpnIps::find()->all();
        foreach ($servers as $server) {
            exec("ping -c 3 ". $server->ip, $output, $status);
            if($status == 0){
                $server->last_ping_time = date("Y-m-d H:i:s");
                $server->connection = 1;
                $server->save();
            } else {
                $server->connection = 0;
                $server->save();
            }
        }
    }
}
